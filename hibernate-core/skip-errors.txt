# Test errors from run 2023-06-29T17:37:13.450783
could not prepare statement <-- undefined reference to EMBEDATTRB
Exception=SQLSyntaxErrorException, sql-state=42000, sql-code=-1 running:
   [insert into TableA (embedAttrA, embedAttrB, id) values (?, ?, ?)]
   undefined reference to EMBEDATTRB

could not extract ResultSet <-- can't find table "NON_EXISTENT"
Exception=SQLSyntaxErrorException, sql-state=42000, sql-code=-25 running:
   [n/a]
   can't find table "NON_EXISTENT"

could not prepare statement <-- can't find function "CONVERT"
Exception=SQLSyntaxErrorException, sql-state=42000, sql-code=-11 running:
   [select h1_0.id,h1_0.name,convert(h1_0.born,110) from ANIMAL h1_0 where h1_0.DTYPE='Human']
   can't find function "CONVERT"

# UNABLE TO DETERMINE FAILING TEST DETAILS
failure=expected parenthesis or DEFAULT or SELECT or VALUES got WHERE
exception=java.sql.SQLSyntaxErrorException: syntax error on line 1
INSERT INTO PERSON WHERE x=y
                   ^ expected parenthesis or DEFAULT or SELECT or VALUES got WHERE


#    com.nuodb.jdbc.SQLStateException$10.create
#    com.nuodb.jdbc.SQLStateException.raise
#    com.nuodb.jdbc.RemConnection.raiseStateException
#    com.nuodb.jdbc.RemConnection.sendAndReceive
#    com.nuodb.jdbc.RemConnection.sendAndReceive
#    com.nuodb.hibernate.NuoHibernateConnection.sendAndReceive
#    com.nuodb.jdbc.RemConnection.doStatementPrepare
#    com.nuodb.jdbc.RemConnection.prepareStatement
#    org.hibernate.engine.jdbc.internal.StatementPreparerImpl$2.doPrepare
#    org.hibernate.engine.jdbc.internal.StatementPreparerImpl$StatementPreparationTemplate.prepareStatement
#    org.hibernate.engine.jdbc.internal.StatementPreparerImpl.prepareStatement
#    org.hibernate.dialect.identity.GetGeneratedKeysDelegate.prepare
#    org.hibernate.id.insert.AbstractReturningDelegate.performInsert
#    org.hibernate.persister.entity.AbstractEntityPersister.insert
#    org.hibernate.persister.entity.AbstractEntityPersister.insert
#    org.hibernate.action.internal.EntityIdentityInsertAction.execute
#    org.hibernate.engine.spi.ActionQueue.execute
#    org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction
#    org.hibernate.engine.spi.ActionQueue.addInsertAction
#    org.hibernate.engine.spi.ActionQueue.addAction
#    org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction
#    org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate
#    org.hibernate.event.internal.AbstractSaveEventListener.performSave
#    org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId
#    org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId
#    org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId
#    org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient
#    org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate
#    org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate
#    org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener
#    org.hibernate.internal.SessionImpl.fireSave
#    org.hibernate.internal.SessionImpl.save
#    org.hibernate.internal.SessionImpl.save
#    org.hibernate.orm.test.sql.hand.identity.CustomInsertSQLWithIdentityColumnTest.testBadInsertionFails
#    jdk.internal.reflect.NativeMethodAccessorImpl.invoke0
#    jdk.internal.reflect.NativeMethodAccessorImpl.invoke
#    jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke
#    java.lang.reflect.Method.invoke
#    org.junit.runners.model.FrameworkMethod$1.runReflectiveCall
#    org.junit.internal.runners.model.ReflectiveCallable.run
#    org.junit.runners.model.FrameworkMethod.invokeExplosively
#    org.hibernate.testing.junit4.ExtendedFrameworkMethod.invokeExplosively
#    org.junit.internal.runners.statements.InvokeMethod.evaluate
#    org.junit.internal.runners.statements.RunBefores.evaluate
#    org.junit.internal.runners.statements.RunAfters.evaluate
#    org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call
#    org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call
#    java.util.concurrent.FutureTask.run
#    java.lang.Thread.run

